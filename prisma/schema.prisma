// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id       String @id @default(uuid())
  username String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  timeTrials            TimeTrial[]
  containerInteractions ContainerInteraction[]
  logs                  Log[]

  @@map("sessions")
}

model Algorithm {
  id             String        @id @default(uuid())
  type           AlgorithmType
  numberOfValues Int           @map("number_of_values")
  minValue       Int           @map("min_value")
  maxValue       Int           @map("max_value")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  @@map("algorithms")
}

model TimeTrial {
  id             String        @id @default(uuid())
  type           AlgorithmType
  time           Int
  numberOfValues Int           @map("number_of_values")
  requiredMoves  Int           @map("required_moves")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  sessions Session[]

  @@map("time_trials")
}

model ContainerInteraction {
  id              String        @id @default(uuid())
  containerIndex  Int           @map("container_index")
  receivedValue   Int?          @map("received_value")
  placedValue     Int?          @map("placed_value")
  isValid         Boolean       @map("is_valid")
  containerValues Int[]         @map("container_values")
  algorithmType   AlgorithmType @map("algorithm_type")
  gameMode        GameMode      @map("game_mode")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  sessionId String  @map("session_id")
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("container_interactions")
}

model Log {
  id      String  @id @default(uuid())
  type    LogType
  message String

  algorithmType   AlgorithmType? @map("algorithm_type")
  gameMode        GameMode?      @map("game_mode")
  containerValues Int[]          @map("container_values")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  sessionId String?  @map("session_id")
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("logs")
}

enum AlgorithmType {
  BUBBLE_SORT
  SELECTION_SORT
}

enum GameMode {
  GUIDED
  TIME_TRIAL
}

enum LogType {
  HOST_CREATED
  HOST_CLOSED

  HOST_JOINED
  HOST_LEFT

  GAME_STARTED
  GAME_OVER
  GAME_WON
  GAME_RESTARTED
}
